General steps:
  Step 1: Define model -- include the layers with output nodes, activation function and input layer
	 `tf.keras.layers.Dense(16, activation=relu)(input_layer)`
  Step 2: Define loss function -- predicts via model and calculates loss 
  Step 3: Instantiate optimizer
  Step 4: Perform minimization -- update weights and bias to minimize loss
	 `optim.minimize(loss_function(arg), var_list=[arg_list])`


For Squential API:
  Step 1: Instantiate the model as sequential
	 `model = tf.keras.models.Sequential()`
  Step 2: Add the layers to build complete model
	 `model.add(tf.keras.layers.Dense(32, activation='sigmoid',input_shape=(784,))
	  PS: Here, input layer should not be pass, only the architecture is defined
  Step 3: Compile the model with optimizer and loss function
	 `model.compile(optimizer, loss)`
  Step 4: Train the model / Minimization
	 `model.fit(X_train, y_train)` 
  Step 5: Evaluate the model on test set
	 `model.evaluate(X_test, y_test)`


For Functional API:
  Step 1: Create layers for mutiple inputs -- include the layers for output nodes, activation function and input layer
	 `tf.keras.layers.Dense(16, activation=relu)(input_layer)`
  Step 2: Use the add() operation to combine the outputs of model 1 and model 2.
	 `merged = tf.keras.layers.add([m1_layer2, m2_layer2])`
  Step 3: Define functional model
	 `model = tf.keras.models.Model(inputs=[m1_inputs, m2_inputs], outputs=merged)`
  Step 4: Train the model / Minimization
	 `model.fit(X_train, y_train)` 
  Step 5: Evaluate the model on test set
	 `model.evaluate(X_test, y_test)`


For Estimator API:
  Step 1: Define feature columns : specify the shape and type of your data and list them
	 `bedrooms = tf.feature_column.numeric_column("bedrooms")`
	 `feature_list = [bedrooms, bathrooms]`
  Step 2: Load and transform data : load and transform your data within a function i.e input_fn()
	  The output of this function will be a dictionary object of features and your labels.
  Step 3: Define an estimator : use premade estimators or define custom estimators with different architectures.
	 `model = tf.estimator.DNNRegressor(feature_columns=feature_list, hidden_units=[2,2])`
  Step 4: Apply train operation : train the model you defined.
	 `model.train(input_fn)`